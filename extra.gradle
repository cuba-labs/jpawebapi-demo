/*
 * Copyright (c) 2008-2019 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

buildscript {
    ext.cubaVersion = '7.1-SNAPSHOT'
    repositories {
        mavenLocal()
        if (System.getenv('HAULMONT_REPOSITORY_URL')) {
            maven {
                credentials {
                    username System.getenv('HAULMONT_REPOSITORY_USER')
                    password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
                }
                url System.getenv('HAULMONT_REPOSITORY_URL')
            }
        } else {
            jcenter()

            /*maven { url "https://dl.bintray.com/cuba-platform/main" }*/

            maven {
                url 'https://repo.cuba-platform.com/content/groups/work'
                credentials {
                    username 'cuba'
                    password 'cuba123'
                }
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "com.haulmont.gradle:addon-gradle-plugin:1.0.3"
    }
}

apply(plugin: 'cuba')

def modulePrefix = 'app'

def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def portalModule = project(":${modulePrefix}-portal")

configure(portalModule) {
    task funcTest(dependsOn: ':prepareTest', description: 'Run functional tests', type: Test) {
        scanForTestClasses = false
        includes = ['**/*FT.class']
        workingDir = "$projectDir/../../"
    }
}

task prepareTest(description: 'Prepare server for tests', dependsOn: [
        setupTomcat,
        coreModule.createDb,
        coreModule.deploy,
        webModule.deploy,
        portalModule.deploy]) {

    doLast {
        // Test configuration
        enableTestProperties.execute()
        enableRemoteJmx.execute()

        // Start server
        start.execute()

        ant.waitfor(maxwait: 30, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            http(url: "http://localhost:8080/app")
        }

        // Delete out directory
        File dir = new File("$projectDir/tests/ui/out")
        if (dir.exists()) {
            project.delete(dir)
        }
    }
}

task enableRemoteJmx() {
    doLast {
        project.file("${cuba.tomcat.dir}/bin/setenv.bat").text = '''
set CATALINA_OPTS=-Xmx512m -Dfile.encoding=UTF-8

set CATALINA_OPTS=%CATALINA_OPTS% -Dlogback.configurationFile=../conf/logback.xml

set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote 
set CATALINA_OPTS=%CATALINA_OPTS% -Djava.rmi.server.hostname=localhost 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.port=7777 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.ssl=false 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.authenticate=false

set JPDA_OPTS=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
'''

        project.file("${cuba.tomcat.dir}/bin/setenv.sh").text = '''
CATALINA_OPTS="-Xmx512m -Dfile.encoding=UTF-8"

CATALINA_OPTS="$CATALINA_OPTS -Dlogback.configurationFile=../conf/logback.xml"

CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote"

CATALINA_OPTS="$CATALINA_OPTS \\
-Djava.rmi.server.hostname=localhost \\
-Dcom.sun.management.jmxremote.port=7777 \\
-Dcom.sun.management.jmxremote.ssl=false \\
-Dcom.sun.management.jmxremote.authenticate=false"

JPDA_OPTS="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n"
'''
    }
}

task enableTestProperties() {
    doLast {
        project.file("${cuba.tomcat.dir}/conf/app-core/").mkdirs()
        project.file("${cuba.tomcat.dir}/conf/app-core/local.app.properties").text = '''
refapp.core.embeddedLdap.startTcpServer = true
'''
        project.file("${cuba.tomcat.dir}/conf/app-portal/").mkdirs()
        project.file("${cuba.tomcat.dir}/conf/app-portal/local.app.properties").text = '''
cuba.rest.ldap.enabled = true
cuba.rest.ldap.urls = ldap://localhost:10389
cuba.rest.ldap.base = dc=example,dc=com
cuba.rest.ldap.user = cn=refapp,dc=example,dc=com
cuba.rest.ldap.password = refapp
cuba.rest.ldap.userLoginField = cn
'''
    }
}

// Deployment testing

task buildWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    singleWar = false
    includeJdbcDriver = true
    includeContextXml = true
}

task buildSingleWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    webXml = "${project(':app-web').projectDir}/web/WEB-INF/single-app-web.xml"
    coreContextXmlPath = 'modules/core/web/META-INF/single-war-context.xml'
    includeJdbcDriver = true
    includeContextXml = true
}

task copyWarToTomcat(type: Copy) {
    from "${project.buildDir}/distributions/war"
    include "*.war"
    into "${cuba.tomcat.dir}/webapps"
}

task deploySingleWar(dependsOn: buildSingleWar, type: Copy) {
    from file("$buildDir/distributions/war/app.war")
    into file('../tomcat/webapps/')
}

task buildUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    appName = 'app'
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task buildSingleUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    singleJar = true
    logbackConfigurationFile = "test-deployment/logback.xml"
}
