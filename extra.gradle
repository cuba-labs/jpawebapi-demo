/*
 * Copyright (c) 2008-2016 Haulmont. All rights reserved.
 * Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.
 */
buildscript {
    ext.cubaVersion = '7.1-SNAPSHOT'
    repositories {
        mavenLocal()
        if (System.getenv('HAULMONT_REPOSITORY_URL')) {
            maven {
                credentials {
                    username System.getenv('HAULMONT_REPOSITORY_USER')
                    password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
                }
                url System.getenv('HAULMONT_REPOSITORY_URL')
            }
        } else {
            jcenter()

            /*maven { url "https://dl.bintray.com/cuba-platform/main" }*/

            maven {
                url 'https://repo.cuba-platform.com/content/groups/work'
                credentials {
                    username 'cuba'
                    password 'cuba123'
                }
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "com.haulmont.gradle:addon-gradle-plugin:1.0.3"
    }
}

apply(plugin: 'cuba')

def modulePrefix = 'app'

def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def portalModule = project(":${modulePrefix}-portal")

def coreJarNames = ['cuba-global', 'cuba-core',
                    'app-global', 'app-core']

configure(coreModule) {

    assembleDbScripts { moduleAlias = '30-app' }

    // HSQLDB stuff
    def hsqlDbName = 'jpademo'

    task startHsqlDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = hsqlDbName
    }

    task stopHsqlDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbName = hsqlDbName
    }

    task killHsqlDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task removeHsqlDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task createHsqlDb(dependsOn: assembleDbScripts, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateHsqlDb(dependsOn: assembleDbScripts, description: 'Updates local HSQL database', type: CubaDbUpdate) {
        dbms = 'hsql'
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(portalModule) {

    task funcTest(dependsOn: ':prepareTest', description: 'Run functional tests', type: Test) {
        scanForTestClasses = false
        includes = ['**/*FT.class']
        workingDir = "$projectDir/../../"
    }
}

task clearConf(description: 'Clears conf directory') {
    doLast {
        def dir = new File(cuba.tomcat.dir, '/conf/app')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }
}

task stopTomcatAfterTest(type: CubaStopTomcat, description: 'Stops Tomcat after functional tests') {
    tomcatRootDir = cuba.tomcat.dir
}

task prepareTest(dependsOn: [dropTomcat, coreModule.assemble, webModule.assemble, portalModule.assemble],
        description: 'Prepare server for tests') {
    doLast {
        // Setup
        setupTomcat.execute()

        // Test configuration
        enableTestProperties.execute()
        enableRemoteJmx.execute()
        
        // Deploy
        coreModule.deploy.execute()
        webModule.deploy.execute()
        portalModule.deploy.execute()
        // Create DB
        coreModule.createDb.execute()
        // Start server
        start.execute()

        ant.waitfor(maxwait: 30, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            http(url: "http://localhost:8080/app")
        }
        // Delete out directory
        File dir = new File("$projectDir/tests/ui/out")
        if (dir.exists()) {
            project.delete(dir)
        }
    }
}

/* ============= Cluster testing =============== */

def tomcat1Dir = cuba.tomcat.dir + '1'
def tomcat2Dir = cuba.tomcat.dir + '2'

task setupTomcat1(type: CubaSetupTomcat) {
    tomcatRootDir = tomcat1Dir
}

task setupTomcat2(type: CubaSetupTomcat) {
    tomcatRootDir = tomcat2Dir
}

task dropTomcat1(type: CubaDropTomcat) {
    tomcatRootDir = tomcat1Dir
    listeningPort = 18787
}

task dropTomcat2(type: CubaDropTomcat) {
    tomcatRootDir = tomcat2Dir
    listeningPort = 28787
}

task dropTomcatDemo(type: CubaDropTomcat) {
    tomcatRootDir = cuba.tomcat.dir
    listeningPort = Integer.valueOf('97' + (rootProject.hasProperty('demoToken') ? rootProject['demoToken'] : '00'))
}

task startTomcat1(type: CubaStartTomcat) {
    tomcatRootDir = tomcat1Dir
}

task startTomcat2(type: CubaStartTomcat) {
    tomcatRootDir = tomcat2Dir
}

configure(coreModule) {
    task deploy1(dependsOn: assemble, type: CubaDeployment) {
        tomcatRootDir = tomcat1Dir
        appName = 'app-core'
        jarNames = coreJarNames
    }
}

configure(webModule) {
    task deploy1(dependsOn: assemble, type: CubaDeployment) {
        tomcatRootDir = tomcat1Dir
        appName = 'app'
        jarNames = ['app-global', 'app-web']
    }
}

//==============Deploy reports==============

task buildWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    singleWar = false
    includeJdbcDriver = true
    includeContextXml = true
}

task buildSingleWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    webXml = "${project(':app-web').projectDir}/web/WEB-INF/single-app-web.xml"
    coreContextXmlPath = 'modules/core/web/META-INF/single-war-context.xml'
    includeJdbcDriver = true
    includeContextXml = true
}

task deploySingleWar(dependsOn: buildSingleWar, type: Copy) {
    from file("$buildDir/distributions/war/app.war")
    into file('../tomcat/webapps/')
}

task buildUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    appName = 'app'
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task buildSingleUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    singleJar = true
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task copyWarToTomcat(type: Copy) {
    from "${project.buildDir}/distributions/war"
    include "*.war"
    into "${cuba.tomcat.dir}/webapps"
}

